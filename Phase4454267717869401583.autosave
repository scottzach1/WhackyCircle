abstract class Phase {
  public boolean isDone;
  public Test curTest;
  
  private ArrayList < Test > tests = new ArrayList();
  private int testIndex = 0;
  
  public void execute() {
    if (curTest != null) {
      curTest.run();
      if (curTest.isDone) {
        next();
      }
    } else if (testIndex == 0) {
      next();
    } else {
      println("Current Test Undefined");
    }
  }
  
  private void next() {
    if (testIndex < tests.size()) {
      curTest = tests.get(testIndex);
    } else {
      isDone = true;
    }
    testIndex++;
  }
  
  public void initialize() { // Implement for each phase
    println("Phase Initialize Unimplemented");
  }
}

class Phase1 extends Phase {
  
  public void initialize() {
    int rad = (int) random(10, 100);
    Test t1 = new Test(new TestAttr() {        
      public void execute() {}    
      
      public void initialize() {
        this.shapes = new ArrayList<Shape>(java.util.Arrays.asList(
          new Circle(new Point(200, 150), 100),
          new Circle(new Point(20, 62), 25),
          new Circle(new Point(90, 100), 75)));
      }    
    });
  this.tests.add(t1);
  };
  
}
